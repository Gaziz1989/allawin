html
    head
        meta(charset="UTF-8")
        title Allawin
        link(rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css")
        link(rel="stylesheet" href="/htmls/css/chats.css")
        link(rel="manifest" href="/manifest.json")
        script(src="//media.twiliocdn.com/sdk/js/video/v1/twilio-video.min.js")
    body
        div(id="app")
            div(id="online-extension" class="chat" :style="connectedUsers.length <= 1 ? 'display:none' : 'display:block'")
                div(class="modal-body extension-video-chat")
                    div(class="complete-video-chat__item")
                        div(class="video-online-chat" id="local-media")
                        div(class="online-extension")
                            button(class="online-extension-button") Продлить на 5 минут за 10000 тенге?
                            p 05:46 из 10:00
                            div(class="online-extension__item")
                                button(class="online-extension__item--button clip")
                                button(class="online-extension__item--button mike")
                            div(class="online-extension-button-decline")
                                img(src="/htmls/assets/img/icons/decline.svg" alt="")

            div(class="chat" :style="connectedUsers.length <= 1 && fromMe ? 'display:block' : 'display:none'")
                div(class="modal-body complete-video-chat")
                    div(class="complete-video-chat__item online-broadcast-connection")
                        div(class="online-call")
                            div(class="online-call__title") Подготовка иска
                            div(class="online-call__text") Соединение ...
                        img(src="/htmls/assets/img/avatar.png" alt="" class="complete-video-chat__item--img")
                        div(class="complete-video-chat__item--name") Костя Смирнов
                        p(class="complete-video-chat__item--text")
                        div(class="accept-decline")
                            button(class="accept-decline__button")
                                img(src="/htmls/assets/img/icons/decline.svg" alt="")

            div(class="chat" :style="!fromMe && !accepted ? 'display:block' : 'display:none'")
                div(class="modal-body complete-video-chat")
                    div(class="complete-video-chat__item")
                        div(class="online-call")
                            div(class="online-call__title") Подготовка иска
                            div(class="online-call__text") Соединение ...
                        img(src="/htmls/assets/img/avatar.png" alt="" class="complete-video-chat__item--img")
                        div(class="complete-video-chat__item--name") Костя Смирнов
                        p(class="complete-video-chat__item--text")
                        div(class="accept-decline")
                            button(class="accept-decline__button" )
                                img(src="/htmls/assets/img/icons/decline.svg" alt="")
                                p Отклонить
                            button(class="accept-decline__button" @click="accept")
                                img(src="/htmls/assets/img/icons/accept.svg" alt="")
                                p Принять

        script(src="https://cdn.socket.io/socket.io-1.4.5.js")
        script(src="https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js")
        script(src="https://unpkg.com/axios/dist/axios.min.js")
        script(src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js")
        script(src="/htmls/js/jwt-decode.min.js")
        script.
            // http://127.0.0.1:8081
            // https://chats-backend.mars.studio/
            const socket = io(`http://127.0.0.1:8081/?token=` + '#{token}')
            new Vue ({
                el: "#app",
                data: {
                    room: '#{room}',
                    token: '#{token}',
                    messages: [],
                    message: '',
                    previewTracks: '',
                    connectOptions: {
                      name: '',
                      logLevel: 'debug'
                    },
                    activeRoom: '',
                    text: '',
                    fromMe: #{fromMe},
                    accepted: false,
                    connectedUsers: []
                },
                created: async function () {

                    socket.on('getRoomOnlineUsers', function (usersArray) {
                        this.connectedUsers = usersArray
                    }.bind(this))

                    socket.on('errorHandle', function (msg) {
                        alert(msg.text)
                    })

                    socket.on('newMessage', function (msg) {
                      this.messages.push(msg)
                    }.bind(this))

                    if (this.fromMe) {
                        socket.emit('join', this.room)
                        this.twilliocall()
                    }
                    
                    let response = await axios.get('/getmessages?room=' + this.room)
                    this.messages = response.data.messages
                },
                methods: {
                    async pushnote () {
                        console.log(this.text)
                        const formData = `message=${JSON.stringify(this.text)}`
                        let response = await axios.post('/pushnote', formData)
                    },
                    detachTracks (tracks) {
                        tracks.map((track) => {
                            track.detach().map((detachedElement) => {
                                detachedElement.remove()
                            })
                        })
                    },
                    detachParticipantTracks (participant) {
                        var tracks = Array.from(participant.tracks.values())
                        this.detachTracks(tracks)
                    },
                    attachTracks (tracks, container) {
                        tracks.map((track) => {
                            container.appendChild(track.attach())
                        })
                    },
                    attachParticipantTracks (participant, container) {
                        var tracks = Array.from(participant.tracks.values())
                        this.attachTracks(tracks, container)
                    },
                    roomJoined (room) {
                        this.activeRoom = room
                        //- console.log(`Joined as '` + this.$auth.currentUser().email + `'`)
                        //- document.getElementById('button-leave').style.display = 'inline'
                        // Attach LocalParticipant's Tracks, if not already attached.
                        var previewContainer = document.getElementById('local-media')
                        if (!previewContainer.querySelector('video')) {
                            this.attachParticipantTracks(room.localParticipant, previewContainer)
                        }
                        // Attach the Tracks of the Room's Participants.

                        if (room.participants.length > 0) {
                            room.participants.map((participant) => {
                                console.log(`Already in Room: '` + participant.identity + `'`)
                                var previewContainer = document.getElementById('remote-media')
                                this.attachParticipantTracks(participant, previewContainer)
                            })
                        }
                        // When a Participant joins the Room, console.log the event.
                        room.on('participantConnected', (participant) => {
                            console.log(`Joining: '` + participant.identity + `'`)
                        })
                        // When a Participant adds a Track, attach it to the DOM.
                        room.on('trackAdded', (track, participant) => {
                            console.log(participant.identity + ` added track: ` + track.kind)
                            var previewContainer = document.getElementById('remote-media')
                            this.attachTracks([track], previewContainer)
                        })
                        // When a Participant removes a Track, detach it from the DOM.
                        room.on('trackRemoved', (track, participant) => {
                            console.log(participant.identity + ` removed track: ` + track.kind)
                            this.detachTracks([track])
                        })
                        // When a Participant leaves the Room, detach its Tracks.
                        room.on('participantDisconnected', (participant) => {
                            console.log(`Participant '` + participant.identity + `' left the room`)
                            this.detachParticipantTracks(participant)
                        })
                        // Once the LocalParticipant leaves the room, detach the Tracks
                        // of all Participants, including that of the LocalParticipant.
                        room.on('disconnected', () => {
                            console.log('Left')
                            if (this.previewTracks) {
                                this.previewTracks.map((track) => {
                                    track.stop()
                                })
                            }
                            this.detachParticipantTracks(room.localParticipant)
                            if (room.participants.length > 0) {
                                room.participants.map(this.detachParticipantTracks)
                            }
                            this.activeRoom = null
                            document.getElementById('button-join').style.display = 'inline'
                            document.getElementById('button-leave').style.display = 'none'
                        })
                    },
                    async twilliocall () {
                        if (this.previewTracks) {
                            this.connectOptions.tracks = this.previewTracks
                        }
                        let response1 = await axios('/gettwilliotoken', {
                            method:'get',
                            headers: {
                                Authorization: `Bearer ${this.token}`
                            }
                        })
                        Twilio.Video.connect(response1.data.token, this.connectOptions).then(this.roomJoined, (error) => {
                            console.log('Could not connect to Twilio: ' + error.message)
                        })
                    },
                    leaveroom () {
                        this.activeRoom.disconnect()
                    },
                    onFileChange (event) {
                        var files = event.target.files || event.dataTransfer.files
                        if (!files.length) {
                            return
                        }
                        this.createFile(files[0])
                    },
                    createFile (file) {
                        var reader = new FileReader()
                        reader.readAsDataURL(file)
                        reader.onload = (e) => {
                            socket.emit('uploadFile', {
                                file: file,
                                filename: file.name,
                                room: this.room
                            })
                        }
                    },
                    onVideoChange (event) {
                        var files = event.target.files || event.dataTransfer.files
                        if (!files.length) {
                            return
                        }
                        this.createVideo(files[0])
                    },
                    createVideo (file) {
                        var reader = new FileReader()
                        reader.readAsDataURL(file)
                        reader.onload = (e) => {
                            socket.emit('uploadVideo', {
                                video: file,
                                filename: file.name,
                                room: this.room
                            })
                        }
                    },
                    onAudioChange (event) {
                        var files = event.target.files || event.dataTransfer.files
                        if (!files.length) {
                            return
                        }
                        this.createAudio(files[0])
                    },
                    createAudio (file) {
                        var reader = new FileReader()
                        reader.readAsDataURL(file)
                        reader.onload = (e) => {
                            socket.emit('uploadAudio', {
                                audio: file,
                                filename: file.name,
                                room: this.room
                            })
                        }
                    },
                    onPhotoChange (event) {
                        var files = event.target.files || event.dataTransfer.files
                        if (!files.length) {
                            return
                        }
                        this.createPhoto(files[0])
                    },
                    createPhoto (file) {
                        var reader = new FileReader()
                        reader.readAsDataURL(file)
                        reader.onload = (e) => {
                            socket.emit('uploadImage', {
                                photo: file,
                                filename: file.name,
                                room: this.room
                            })
                        }
                    },
                    smsclass (_item) {
                        if (_item.fromId === jwt_decode(this.token).id) {
                            // this.$auth.currentUser().id
                            return 'chat-video chat-video-right'
                        } else {
                            return 'chat-video'
                        }
                    },
                    messageFrom (_item) {
                        if (_item.fromId === jwt_decode(this.token).id) {
                            return 'Я'
                        } else {
                            return _item.from.name ? _item.from.name : _item.from.email
                        }
                    },
                    accept () {
                        this.accepted = !this.accepted
                        socket.emit('join', this.room)
                    },
                    async createMessage (e) {
                        try {
                            await socket.emit('createMessage', ({
                                message: this.message,
                                room: this.room
                            }))
                            this.message = ''
                        } catch (error) {
                            console.log(error)
                        }
                    }
                },
                computed: {
                    disabled () {
                        if (this.message && this.room) {
                            return false
                        } else {
                            return true
                        }
                    },
                    buttonclass () {
                        if (this.message && this.room) {
                            return 'mainbtn'
                        } else {
                            return 'dis_main_btn'
                        }
                    }
                }
            })
            //- div(class="mainInfo")
            //-     h5 Комната: #{room}
            //-     div(class="texts")
            //-         div(class="chat")
            //-             div(class="messages" v-for="(message, index) in messages")
            //-                 span(:class="smsclass(message) + ' download'"  v-if="message.type === 'file'")
            //-                     a(:href="message.file" target='_blank' preload="none" download) {{message.text}}
            //-                 span(:class="smsclass(message) + ' img'"  v-else-if="message.type === 'image'")
            //-                     img(:src="message.preview1" alt="Фото" width="180")
            //-                 span(:class="smsclass(message) + ' video'"  v-else-if="message.type === 'video'")
            //-                     video(width="320" height="240" controls)
            //-                         source(:src="message.preview2")
            //-                 span(:class="smsclass(message) + ' audio'"  v-else-if="message.type === 'audio'")
            //-                     audio(controls)
            //-                         source(:src="message.file")
            //-                 span(:class="smsclass(message)" v-else) {{message.from ? message.from.email : message.fromId}} : {{message.text}}
            //-     div(class="sending")
            //-         input(type="text" name="text" class="sendInput" v-model="message")
            //-         button(@click="createMessage" :class="buttonclass" :disabled="disabled") Send
            //-     div(class="buttons")
            //-         div(class="inputforimg")
            //-             label(title="Загрузить файл" class='uploadlabel')
            //-                 div
            //-                     span Файл
            //-                     input(class="imginp" type="file" @change="onFileChange" style="display:none")
            //-         div(class="inputforimg")
            //-             label(title="Загрузить видео" class='uploadlabel')
            //-                 div
            //-                     span Видео
            //-                     input(class="imginp" type="file" @change="onVideoChange" style="display:none")
            //-         div(class="inputforimg")
            //-             label(title="Загрузить аудио" class='uploadlabel')
            //-                 div
            //-                     span Аудио
            //-                     input(class="imginp" type="file" @change="onAudioChange" style="display:none")
            //-         div(class="inputforimg")
            //-             label(title="Загрузить изображение" class='uploadlabel')
            //-                 div
            //-                     span Изображение
            //-                     input(class="imginp" type="file" @change="onPhotoChange" style="display:none")
            //-         div(class="inputforimg")
            //-             button(@click="calling") Call